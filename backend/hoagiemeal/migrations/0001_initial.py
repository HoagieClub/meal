# Generated by Django 5.1.2 on 2024-10-27 06:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import pgvector.django.vector
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('net_id', models.CharField(blank=True, db_index=True, help_text='University NetID', max_length=20, null=True, unique=True)),
                ('class_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('dietary_restrictions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='List of dietary restrictions/preferences', size=None)),
                ('daily_calorie_target', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(10000)])),
                ('daily_protein_target', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(1000)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DiningHall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('map_name', models.CharField(max_length=255)),
                ('database_id', models.PositiveIntegerField(help_text="API's location identifier", unique=True)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('building_name', models.CharField(max_length=255)),
                ('amenities', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this dining hall is currently operational')),
                ('operation_hours', models.JSONField(blank=True, help_text='Operating hours in JSON format', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'dining_halls',
                'indexes': [models.Index(fields=['database_id'], name='dining_hall_databas_79e937_idx'), models.Index(fields=['name'], name='dining_hall_name_9d7b74_idx')],
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, default=django.utils.timezone.now)),
                ('meal', models.CharField(choices=[('BR', 'Breakfast'), ('LU', 'Lunch'), ('DI', 'Dinner')], db_index=True, max_length=2)),
                ('last_fetched', models.DateTimeField(auto_now=True, help_text='Last time menu was updated from API')),
                ('dining_hall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menus', to='hoagiemeal.dininghall')),
            ],
            options={
                'db_table': 'menus',
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('api_id', models.PositiveIntegerField(help_text='Original menu item ID from the API', unique=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('link', models.URLField(blank=True, max_length=500)),
                ('allergens', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None)),
                ('ingredients', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='hoagiemeal.menu')),
            ],
            options={
                'db_table': 'menu_items',
            },
        ),
        migrations.CreateModel(
            name='FoodVector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vector', pgvector.django.vector.VectorField(dimensions=384, help_text='Vector embedding of menu item characteristics')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('menu_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='food_vector', to='hoagiemeal.menuitem')),
            ],
            options={
                'db_table': 'food_vectors',
            },
        ),
        migrations.CreateModel(
            name='MenuItemMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('times_served', models.PositiveIntegerField(default=0)),
                ('times_consumed', models.PositiveIntegerField(default=0)),
                ('avg_portion_size', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('popularity_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Calculated score based on consumption patterns', max_digits=5)),
                ('seasonal_availability', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), help_text='Monthly availability pattern (1-12)', size=12)),
                ('last_served', models.DateField(blank=True, null=True)),
                ('common_pairings', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), blank=True, default=list, help_text='IDs of commonly co-consumed menu items', size=None)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('menu_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='hoagiemeal.menuitem')),
            ],
            options={
                'db_table': 'menu_item_metrics',
            },
        ),
        migrations.CreateModel(
            name='MenuItemNutrient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serving_size', models.CharField(blank=True, max_length=50)),
                ('serving_unit', models.CharField(blank=True, max_length=20)),
                ('calories', models.PositiveSmallIntegerField(blank=True, db_index=True, null=True)),
                ('calories_from_fat', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('total_fat', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('saturated_fat', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('trans_fat', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cholesterol', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('sodium', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True)),
                ('total_carbohydrates', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('dietary_fiber', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('sugars', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('protein', models.DecimalField(blank=True, db_index=True, decimal_places=2, max_digits=6, null=True)),
                ('vitamin_d', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('potassium', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('calcium', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('iron', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('menu_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='nutrient_info', to='hoagiemeal.menuitem')),
            ],
            options={
                'db_table': 'menu_item_nutrients',
            },
        ),
        migrations.CreateModel(
            name='UserDietaryProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('excluded_ingredients', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None)),
                ('cuisine_preferences', models.JSONField(default=dict, help_text='Weighted cuisine type preferences')),
                ('meal_time_preferences', models.JSONField(default=dict, help_text='Preferred dining times')),
                ('sustainability_preference', models.BooleanField(default=False, help_text='Preference for sustainable options')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_menu_items', models.ManyToManyField(related_name='favorited_by', to='hoagiemeal.menuitem')),
                ('preferred_dining_halls', models.ManyToManyField(related_name='preferred_by', to='hoagiemeal.dininghall')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dietary_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_dietary_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserMealLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('portions', models.DecimalField(decimal_places=2, default=1.0, help_text='Number of servings consumed', max_digits=4, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('consumed_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('meal_type', models.CharField(choices=[('BR', 'Breakfast'), ('LU', 'Lunch'), ('DI', 'Dinner')], max_length=2)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consumption_logs', to='hoagiemeal.menuitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_meal_logs',
            },
        ),
        migrations.AddIndex(
            model_name='menu',
            index=models.Index(fields=['dining_hall', 'date', 'meal'], name='menus_dining__9d8f78_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='menu',
            unique_together={('dining_hall', 'date', 'meal')},
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['name'], name='menu_items_name_1ab05b_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['api_id'], name='menu_items_api_id_3b751a_idx'),
        ),
        migrations.AddIndex(
            model_name='foodvector',
            index=models.Index(fields=['vector'], name='food_vector_idx', opclasses=['vector_ops']),
        ),
        migrations.AddIndex(
            model_name='menuitemmetrics',
            index=models.Index(fields=['popularity_score'], name='menu_item_m_popular_970f7d_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitemmetrics',
            index=models.Index(fields=['times_consumed'], name='menu_item_m_times_c_4456a7_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitemmetrics',
            index=models.Index(fields=['last_served'], name='menu_item_m_last_se_482cd7_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitemnutrient',
            index=models.Index(fields=['calories'], name='menu_item_n_calorie_cb3891_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitemnutrient',
            index=models.Index(fields=['protein'], name='menu_item_n_protein_834583_idx'),
        ),
        migrations.AddIndex(
            model_name='usermeallog',
            index=models.Index(fields=['user', 'consumed_at'], name='user_meal_l_user_id_6e1885_idx'),
        ),
        migrations.AddIndex(
            model_name='usermeallog',
            index=models.Index(fields=['consumed_at'], name='user_meal_l_consume_c7b89e_idx'),
        ),
    ]
